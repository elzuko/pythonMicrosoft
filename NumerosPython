from math import ceil , floor
round_up = ceil(12.5)
print (round_up)

round_down= floor(12.5)
print(round_down)

print(39 - 16)
print(16 - 39)

print(abs(39 - 16))

print(abs(16 - 39))


###### creacion de lista
#######################

Nombres = ["LUIS","CARLOS","ana","lucia","candy","SOPHIA"]
print("primer nombre de la lista:", Nombres[0])
print("segundo nombre de la lista:", Nombres[1])
print("Ultimo nombre de la lista:", Nombres[5])
Nombres[5] = "ESMERALDA"
print("Es el Segundo nombre de sophia:", Nombres[5])
Cantidad_Nombres = len(Nombres)
print("La cantidad en numero es:",Cantidad_Nombres)
##### AGREGAR CONTENIDO A LA LISTA
###################################
Nombres = ["LUIS","CARLOS","ana","lucia","candy","SOPHIA"]
Nombres.append("FRANCISCO")
Cantidad_Nombres = len(Nombres)
print(Cantidad_Nombres)
print(Nombres)

##### QUITAR CONRTENIDO A LA LISTA
###################################
Cantidad_Nombres = len(Nombres)
Nombres.pop()
print(Nombres)

 



gravity_on_earth = 1.0
gravity_on_the_moon = 0.166
gravity_on_planets = [0.378, 0.907, 1, 0.377, 2.36, 0.916, 0.889, 1.12]
bus_weight = 124054 # in Newtons, on Earth
print("On Mercury, a double-decker bus weighs", bus_weight * gravity_on_planets[3],"N")

gravity_on_planets = [0.378, 0.907, 1, 0.377, 2.36, 0.916, 0.889, 1.12]
bus_weight = 12650 # in Newtons, on Earth

print("On Earth, a double-decker bus weighs", bus_weight, "N")
print("The lightest a bus would be in the solar system is", bus_weight * min(gravity_on_planets), "N")
print("The heaviest a bus would be in the solar system is", bus_weight * max(gravity_on_planets), "N")
print(min(gravity_on_planets))
print(max(gravity_on_planets))


planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
planets_before_earth = planets[0:2]
print(planets_before_earth)


amalthea_group = ["Metis", "Adrastea", "Amalthea", "Thebe"]
galilean_moons = ["Io", "Europa", "Ganymede", "Callisto"]
regular_satellite_moons2 = amalthea_group + galilean_moons
regular_satellite_moons = amalthea_group + galilean_moons
regular_satellite_moons.sort(reverse=true)
print("The regular satellite moons of Jupiter are", regular_satellite_moons)
print("The regular satellite moons of Jupiter are", regular_satellite_moons2)


# ingreso de datos
ingresadatos = ''
# Ingreso lista
data1 = []
# Bucle While
while ingresadatos.lower() != 'done':
  if ingresadatos:
    data1.append(ingresadatos)
  ingresadatos = input("Ingrese Nuevo Dato, sino escriba 'done'")  

  print(data1)

countdown = [4, 3, 2, 1, 0]
for number in countdown:
    print(number)
print("Blast off!! ðŸš€")

from time import sleep

countdown = [4, 3, 2, 1, 0]

for number in countdown:
    print(number)
    sleep(1)  # Wait 1 second
print("Blast off!! ðŸš€")

###### DICTIONARY ############
##############################

planet = {
    'name': 'Earth',
    'moons': 1,
    #'wibble':'locura'
}

print(planet.get('name'))

wibble = planet.get('wibble') # Returns None
print(wibble)
wibble = planet['wibble'] # Throws KeyError
print(wibble)

planet.update({'name': 'Makemake'})

# No output: name is now set to Makemake.